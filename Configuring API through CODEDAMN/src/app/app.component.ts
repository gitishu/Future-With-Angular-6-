import { Component } from '@angular/core';//imported from this module 
import {HelloComponent} from  './hello/hello.component';
import {RecordsService} from './records.service';


// function log (target, name, descriptor){//defines the function 
// 	console.log(target, name , descriptor)
// 	//store the original function

// 	const original = descriptor.value; 

//   original();
//   // descriptor.value=function(){

//   //   console.log("This message was hacked");
//   // }  	


//   ///doing by the second way

//   // descriptor.value = function(...args){//by passing all the arguments here we are overriding the function here  
    
//   //   console.log("Arguments ",args,"were passed in this function");
//   //   const result = original.apply(this,args);//passing the arguments inside the original function here 
//   //   console.log("The result of this function is ",result);
//   // }






//   return descriptor;//returning that function which is actually being called     

// }





//here class decorator i defined here 



// function log(className){
//   console.log(className);
//   return;
// }


interface myData {//it specifies that what kind of response i am expecting ..
      obj: Array<Object>//key thi ye string ki form me tabhi problems aa rhi thi 
}


@Component({//decorator this is the [(main component jo ki app component)] ke lie hamne decorator rakha hai  
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']//within  brackets also ok 
})
export class AppComponent {//export the class by the version of the angular  6 
  title = 'app';//here this class acts as the logic for this component ok 

  vari='hi there';//vari defined first here and then use the this keyword 
  text="this";
  records=[] //initialised record with an empty vlalue 
  // this is called by the JavaScript engine
   // rather than Angular **************************************  private myFirstService #############################################################  is the DI (dependency injection)
  constructor(private myFirstService: RecordsService){//giving title to my first service using the RecordsService and we need a name for the service to happen....
    //privately injecting the service to myFirstService variable and then phir us variable ka use karke mai apni service ke andar pade hue data ko access karunga 
 
  //  console.log ("This statement was generated by the constructor",this.aSimpleMethod(5,2));
  //  console.log("generated by the console log ",this.aSimpleMethod(5,2));
  
    // setInterval(() => {//timer type service 
    //   this.myvariable=Math.random().toString()
    //   this.
    // },500)




    this.records=[] //old format hai ye
  }

  // constructor(){
  // }

    


  callMyFunction(){
    console.log("function invoked");
    this.vari="hello";//use this keyword here for accessing wihtout any class object  
  }


  updateValue(e){
    this.text=e.target.value;
    console.log(e.target.value);
    // $event.this.text="hanji";
  }
  // index=1;

  //creating the dummy data for the *ngFor directive 

  // records = [//this is a array of json objects which is called as ITERABLE DATA in angular
  //  {
  //     name: 'Ishmeet',
  //     online: true 
  //  },

  //  {
  //     name: 'tarun',
  //     online: false
  //  }
  // ]  ab yeh data service pe pahunch gya hai

  //now we will be injecting sevices to the component


  ngOnInit(){
    
    
    // ngOnInit is purely there to give us a signal that Angular has finished initialising the component.
    // This phase includes the first pass at Change Detection against the properties that we may bind to the component itself - such as using an @Input() decorator.
    // Due to this, the @Input() properties are available inside ngOnInit, however are undefined inside the constructor, by design.

    // The ngOnInit lifecycle hook is a guarantee that your bindings are readily available.
      this.myFirstService.getData()
      .subscribe(data =>{//this subscription is an operator of rxjs ..
      //   console.log("We got the",data);if u have to use this then use this in the service part 

        // 2 way of assigning the records 

        // this.records=this.myFirstService.getData();
        // console.log("getData() having :" + this.myFirstService.getData());



        this.records = data.obj //m imp line here jah pe error aa rha hai basically 
        console.log("We got the",this.records[0]);
    }) 
    // .myfunction(){
    // }




       //by making a service explicit to a component only       
   // now here this component request the records from the records.sevice.ts file...ok 
   //now this would give us access to the service object ...
}
  
  
  

// @log//my self member decorator 
//   aSimpleMethod(a,b){
//   	console.log("hey their");
//     return a*a;//product returned 
//   	//ki vo decorate karega kaise yeh cheez aayegi
//   }


} 
    



